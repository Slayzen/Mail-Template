{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\necat\\\\WorkSpace\\\\project\\\\src\\\\components\\\\template\\\\TemplateMail.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\n\nclass TemplateMail extends React.Component {\n  //buraya meta yı gönderdik\n  constructor(props) {\n    super(props);\n\n    this.renderInput = ({\n      input = {},\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      console.log(input);\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.renderInputArea = ({\n      input,\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.onSubmit = formValues => {\n      //this.props.onSubmit(formValues);\n      console.log(formValues);\n    };\n\n    this.state = {\n      a: null\n    };\n  }\n\n  componentDidUpdate() {\n    this.setState({\n      a: this.props.initialValues.subject._id\n    });\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    //check error\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \" ui container\",\n      style: {\n        padding: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"recipients\",\n      component: this.renderInput,\n      label: \"Recipients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"subject\",\n      component: this.renderInput,\n      label: \"Subject\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"context\",\n      component: this.renderInputArea,\n      label: \"Context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      style: {\n        marginTop: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \" You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\n  form: \"mailForm\",\n  validate: validate //sadece validate de yazılabilir\n\n})(TemplateMail);","map":{"version":3,"sources":["C:\\Users\\necat\\WorkSpace\\project\\src\\components\\template\\TemplateMail.js"],"names":["React","Field","reduxForm","TemplateMail","Component","constructor","props","renderInput","input","label","meta","classNameError","error","touched","console","log","renderError","renderInputArea","onSubmit","formValues","state","a","componentDidUpdate","setState","initialValues","subject","_id","render","padding","handleSubmit","marginTop","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\r\n\r\nclass TemplateMail extends React.Component {\r\n  //buraya meta yı gönderdik\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { a: null };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setState({ a: this.props.initialValues.subject._id });\r\n  }\r\n  renderError({ error, touched }) {\r\n    //check error\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  renderInput = ({ input = {}, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    console.log(input);\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  renderInputArea = ({ input, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n\r\n        <textarea {...input}></textarea>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    //this.props.onSubmit(formValues);\r\n    console.log(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\" ui container\" style={{ padding: \"20px\" }}>\r\n        <div className=\"column\">\r\n          <p></p>\r\n          <form\r\n            className=\"ui form error\"\r\n            onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n          >\r\n            <Field\r\n              name=\"recipients\"\r\n              component={this.renderInput}\r\n              label=\"Recipients\"\r\n            />\r\n            <Field\r\n              name=\"subject\"\r\n              component={this.renderInput}\r\n              label=\"Subject\"\r\n            />\r\n            <Field\r\n              name=\"context\"\r\n              component={this.renderInputArea}\r\n              label=\"Context\"\r\n            />\r\n            <button className=\"ui button primary\" style={{ marginTop: \"10px\" }}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \" You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport default reduxForm({\r\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\r\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\r\n  form: \"mailForm\",\r\n  validate: validate //sadece validate de yazılabilir\r\n})(TemplateMail);\r\n"]},"metadata":{},"sourceType":"module"}