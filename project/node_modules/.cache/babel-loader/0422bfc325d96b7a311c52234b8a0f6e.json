{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\necat\\\\WorkSpace\\\\project\\\\src\\\\components\\\\template\\\\TemplateShow.js\";\nimport React from \"react\";\nimport Modal from \"../Modal\";\nimport history from \"../../history\";\nimport { fetchSingleTemplate } from \"../../actions\";\nimport { connect } from \"react-redux\";\n\nclass TemplateShow extends React.Component {\n  componentDidMount() {\n    this.props.fetchSingleTemplate(this.props.match.params.id);\n  }\n\n  renderActions() {\n    return (// jsx returnlerinde simdiye kadar hep elementleri bir div in icinde wrapladık ve gönderdim fakat eger\n      // wraplamamız gereken bir durum oldugunda React.Fragment nesnesini kullanıyoruz ekrana renderlarnırken hicbir\n      // html elementi olusturmuyor\n      React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        // bu sekilde invo etmeden parametresi hazır fonksiyon cevirmis olduk\n        className: \"ui button negative\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Delete\"), React.createElement(Link, {\n        to: \"/\",\n        className: \"ui button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Cancel\"))\n    );\n  }\n\n  renderContent() {\n    if (!this.props.stream) {\n      return \"Are you sure you want to delete the stream ?\";\n    }\n\n    return \"Are you sure you want to delete the stream named:  \".concat(this.props.stream.title);\n  }\n\n  render() {\n    return React.createElement(Modal, {\n      onDismiss: () => {\n        history.push(\"/\");\n      },\n      title: \"Delete Stream\",\n      content: this.renderContent(),\n      actions: this.renderActions(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    templates: state.strams[ownProps.match.params.id]\n  };\n};\n\nexport default connect()(TemplateShow);","map":{"version":3,"sources":["C:\\Users\\necat\\WorkSpace\\project\\src\\components\\template\\TemplateShow.js"],"names":["React","Modal","history","fetchSingleTemplate","connect","TemplateShow","Component","componentDidMount","props","match","params","id","renderActions","renderContent","stream","title","render","push","mapStateToProps","state","ownProps","templates","strams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,mBAAT,QAAoC,eAApC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWL,mBAAX,CAA+B,KAAKK,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAAvD;AACD;;AACDC,EAAAA,aAAa,GAAG;AACd,WACE;AACA;AACA;AAEA,0BAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE;AACA,QAAA,SAAS,EAAC,oBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAOE,oBAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF;AALF;AAiBD;;AACDC,EAAAA,aAAa,GAAG;AACd,QAAI,CAAC,KAAKL,KAAL,CAAWM,MAAhB,EAAwB;AACtB,aAAO,8CAAP;AACD;;AACD,wEAA6D,KAAKN,KAAL,CAAWM,MAAX,CAAkBC,KAA/E;AACD;;AACDC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,KAAD;AACE,MAAA,SAAS,EAAE,MAAM;AACfd,QAAAA,OAAO,CAACe,IAAR,CAAa,GAAb;AACD,OAHH;AAIE,MAAA,KAAK,EAAC,eAJR;AAKE,MAAA,OAAO,EAAE,KAAKJ,aAAL,EALX;AAME,MAAA,OAAO,EAAE,KAAKD,aAAL,EANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD;;AAxCwC;;AA2C3C,MAAMM,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AACLC,IAAAA,SAAS,EAAEF,KAAK,CAACG,MAAN,CAAaF,QAAQ,CAACX,KAAT,CAAeC,MAAf,CAAsBC,EAAnC;AADN,GAAP;AAGD,CAJD;;AAKA,eAAeP,OAAO,GAAGC,YAAH,CAAtB","sourcesContent":["import React from \"react\";\r\nimport Modal from \"../Modal\";\r\nimport history from \"../../history\";\r\nimport { fetchSingleTemplate } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nclass TemplateShow extends React.Component {\r\n  componentDidMount() {\r\n    this.props.fetchSingleTemplate(this.props.match.params.id);\r\n  }\r\n  renderActions() {\r\n    return (\r\n      // jsx returnlerinde simdiye kadar hep elementleri bir div in icinde wrapladık ve gönderdim fakat eger\r\n      // wraplamamız gereken bir durum oldugunda React.Fragment nesnesini kullanıyoruz ekrana renderlarnırken hicbir\r\n      // html elementi olusturmuyor\r\n\r\n      <React.Fragment>\r\n        <button\r\n          // bu sekilde invo etmeden parametresi hazır fonksiyon cevirmis olduk\r\n          className=\"ui button negative\"\r\n        >\r\n          Delete\r\n        </button>\r\n        <Link to=\"/\" className=\"ui button\">\r\n          Cancel\r\n        </Link>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  renderContent() {\r\n    if (!this.props.stream) {\r\n      return \"Are you sure you want to delete the stream ?\";\r\n    }\r\n    return `Are you sure you want to delete the stream named:  ${this.props.stream.title}`;\r\n  }\r\n  render() {\r\n    return (\r\n      <Modal\r\n        onDismiss={() => {\r\n          history.push(\"/\");\r\n        }}\r\n        title=\"Delete Stream\"\r\n        content={this.renderContent()}\r\n        actions={this.renderActions()}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    templates: state.strams[ownProps.match.params.id]\r\n  };\r\n};\r\nexport default connect()(TemplateShow);\r\n"]},"metadata":{},"sourceType":"module"}