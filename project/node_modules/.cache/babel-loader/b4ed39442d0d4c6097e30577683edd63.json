{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\necat\\\\WorkSpace\\\\project\\\\src\\\\components\\\\template\\\\TemplateMail.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\n\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nclass TemplateMail extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta,\n      dene\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, label), React.createElement(\"input\", {\n        value: this.props.mail._id,\n        autoComplete: \"off\",\n        onChange: e => this.onMailChange(e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.renderInputArea = ({\n      input = {},\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.onSubmit = formValues => {\n      //this.props.onSubmit(formValues);\n      console.log(formValues);\n    };\n  }\n\n  //buraya meta yı gönderdik\n  renderError({\n    error,\n    touched\n  }) {\n    //check error\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  onMailChange(value) {\n    this.props.mail._id = value;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \" ui grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"recipients\",\n      input: this.props.mail.subject,\n      component: this.renderInput,\n      label: \"Recipients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"subject\",\n      component: this.renderInput,\n      label: \"Subject\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"context\",\n      component: this.renderInputArea,\n      label: \"Context\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      style: {\n        marginTop: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \" You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst mapStateToProps = state => {\n  return {\n    mail: state.mail\n  };\n};\n\nconst fromWrapped = reduxForm({\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\n  form: \"mailForm\",\n  validate: validate //sadece validate de yazılabilir\n\n})(TemplateMail);\nexport default connect(mapStateToProps)(fromWrapped);","map":{"version":3,"sources":["C:\\Users\\necat\\WorkSpace\\project\\src\\components\\template\\TemplateMail.js"],"names":["React","Field","reduxForm","Link","connect","TemplateMail","Component","renderInput","input","label","meta","dene","classNameError","error","touched","props","mail","_id","e","onMailChange","target","value","renderError","renderInputArea","onSubmit","formValues","console","log","render","handleSubmit","subject","marginTop","validate","errors","title","description","mapStateToProps","state","fromWrapped","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nclass TemplateMail extends React.Component {\r\n  //buraya meta yı gönderdik\r\n\r\n  renderError({ error, touched }) {\r\n    //check error\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  onMailChange(value) {\r\n    this.props.mail._id = value;\r\n  }\r\n  renderInput = ({ input, label, meta, dene }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n        <input\r\n          value={this.props.mail._id}\r\n          autoComplete=\"off\"\r\n          onChange={(e) => this.onMailChange(e.target.value)}\r\n        />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  renderInputArea = ({ input = {}, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n\r\n        <textarea {...input}></textarea>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    //this.props.onSubmit(formValues);\r\n    console.log(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\" ui grid\">\r\n        <div className=\"column\">\r\n          <form\r\n            className=\"ui form error\"\r\n            onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n          >\r\n            <Field\r\n              name=\"recipients\"\r\n              input={this.props.mail.subject}\r\n              component={this.renderInput}\r\n              label=\"Recipients\"\r\n            />\r\n            <Field\r\n              name=\"subject\"\r\n              component={this.renderInput}\r\n              label=\"Subject\"\r\n            />\r\n            <Field\r\n              name=\"context\"\r\n              component={this.renderInputArea}\r\n              label=\"Context\"\r\n            />\r\n            <button className=\"ui button primary\" style={{ marginTop: \"10px\" }}>\r\n              Submit\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \" You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    mail: state.mail\r\n  };\r\n};\r\n\r\nconst fromWrapped = reduxForm({\r\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\r\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\r\n  form: \"mailForm\",\r\n  validate: validate //sadece validate de yazılabilir\r\n})(TemplateMail);\r\n\r\nexport default connect(mapStateToProps)(fromWrapped);\r\n"]},"metadata":{},"sourceType":"module"}