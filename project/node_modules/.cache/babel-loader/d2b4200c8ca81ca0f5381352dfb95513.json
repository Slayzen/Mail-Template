{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\necat\\\\WorkSpace\\\\project\\\\src\\\\components\\\\template\\\\TemplateMail.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\n\nimport { sendMail } from \"../../actions\";\nimport { connect } from \"react-redux\";\n\nclass TemplateMail extends React.Component {\n  //buraya meta yı gönderdik\n  constructor(props) {\n    super(props);\n\n    this.renderInput = ({\n      input = {},\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.renderInputArea = ({\n      input,\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues);\n      const mail = {\n        from: \"mailexample09@gmail.com\",\n        to: \"necatisarhanli@gmail.com\",\n        subject: formValues.subject,\n        text: formValues.content\n      };\n      this.props.sendMail(mail); //this.props.onSubmit(formValues);\n    };\n\n    this.state = {\n      a: null\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    //check error\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Send Mail\"), React.createElement(\"div\", {\n      className: \" ui two column centered grid\",\n      style: {\n        padding: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"segment\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"asdadasdsa\")), React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"subject\",\n      component: this.renderInput,\n      label: \"Subject\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"content\",\n      component: this.renderInputArea,\n      label: \"Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      style: {\n        marginTop: \"10px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Submit\")))));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \" You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"mailForm\",\n  validate: validate\n})(TemplateMail);\nexport default connect(null, // mapStateToProp\n{\n  sendMail // action creater\n\n})(formWrapped);","map":{"version":3,"sources":["C:\\Users\\necat\\WorkSpace\\project\\src\\components\\template\\TemplateMail.js"],"names":["React","Field","reduxForm","sendMail","connect","TemplateMail","Component","constructor","props","renderInput","input","label","meta","classNameError","error","touched","renderError","renderInputArea","onSubmit","formValues","console","log","mail","from","to","subject","text","content","state","a","render","textAlign","padding","handleSubmit","marginTop","validate","errors","title","description","formWrapped","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC,C,CAA+C;;AAC/C,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AACzC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAenBC,WAfmB,GAeL,CAAC;AAAEC,MAAAA,KAAK,GAAG,EAAV;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA;AAArB,KAAD,KAAiC;AAC7C,YAAMC,cAAc,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAApB,CAD6C,CACgC;;AAC7E,aACE;AAAK,QAAA,SAAS,EAAEF,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BF,KAA7B,CADF,EAEE,+CAAWD,KAAX;AAAkB,QAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFF,EAGG,KAAKM,WAAL,CAAiBJ,IAAjB,CAHH,CADF,CAF6C,CAQ1C;AACJ,KAxBkB;;AAAA,SA0BnBK,eA1BmB,GA0BD,CAAC;AAAEP,MAAAA,KAAF;AAASC,MAAAA,KAAT;AAAgBC,MAAAA;AAAhB,KAAD,KAA4B;AAC5C,YAAMC,cAAc,mBAAYD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAnD,CAApB,CAD4C,CACiC;;AAC7E,aACE;AAAK,QAAA,SAAS,EAAEF,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,SAAS,EAAC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6BF,KAA7B,CADF,EAGE,kDAAcD,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHF,EAIG,KAAKM,WAAL,CAAiBJ,IAAjB,CAJH,CADF,CAF4C,CASzC;AACJ,KApCkB;;AAAA,SAsCnBM,QAtCmB,GAsCPC,UAAD,IAAgB;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,YAAMG,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAE,yBADK;AAEXC,QAAAA,EAAE,EAAE,0BAFO;AAGXC,QAAAA,OAAO,EAAEN,UAAU,CAACM,OAHT;AAIXC,QAAAA,IAAI,EAAEP,UAAU,CAACQ;AAJN,OAAb;AAMA,WAAKnB,KAAL,CAAWL,QAAX,CAAoBmB,IAApB,EARyB,CASzB;AACD,KAhDkB;;AAEjB,SAAKM,KAAL,GAAa;AAAEC,MAAAA,CAAC,EAAE;AAAL,KAAb;AACD;;AAEDb,EAAAA,WAAW,CAAC;AAAEF,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,EAAqB;AAC9B;AACA,QAAIA,OAAO,IAAID,KAAf,EAAsB;AACpB,aACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF;;AAoCDgB,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,EAIE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWyB,YAAX,CAAwB,KAAKf,QAA7B,CAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,SAAS,EAAE,KAAKT,WAFlB;AAGE,MAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EASE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAC,SADP;AAEE,MAAA,SAAS,EAAE,KAAKQ,eAFlB;AAGE,MAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAcE;AACE,MAAA,SAAS,EAAC,mBADZ;AAEE,MAAA,KAAK,EAAE;AAAEiB,QAAAA,SAAS,EAAE;AAAb,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAdF,CAJF,CAJF,CAFF,CADF;AAoCD;;AAzFwC;;AA4F3C,MAAMC,QAAQ,GAAIhB,UAAD,IAAgB;AAC/B,QAAMiB,MAAM,GAAG,EAAf;;AACA,MAAI,CAACjB,UAAU,CAACkB,KAAhB,EAAuB;AACrBD,IAAAA,MAAM,CAACC,KAAP,GAAe,yBAAf;AACD;;AACD,MAAI,CAAClB,UAAU,CAACmB,WAAhB,EAA6B;AAC3BF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AACD,SAAOF,MAAP;AACD,CATD;;AAWA,MAAMG,WAAW,GAAGrC,SAAS,CAAC;AAC5BsC,EAAAA,IAAI,EAAE,UADsB;AAE5BL,EAAAA,QAAQ,EAAEA;AAFkB,CAAD,CAAT,CAGjB9B,YAHiB,CAApB;AAKA,eAAeD,OAAO,CACpB,IADoB,EACd;AACN;AAAED,EAAAA,QAAF,CAAa;;AAAb,CAFoB,CAAP,CAGboC,WAHa,CAAf","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\r\nimport { sendMail } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nclass TemplateMail extends React.Component {\r\n  //buraya meta yı gönderdik\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { a: null };\r\n  }\r\n\r\n  renderError({ error, touched }) {\r\n    //check error\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  renderInput = ({ input = {}, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  renderInputArea = ({ input, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n\r\n        <textarea {...input}></textarea>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    console.log(formValues);\r\n    const mail = {\r\n      from: \"mailexample09@gmail.com\",\r\n      to: \"necatisarhanli@gmail.com\",\r\n      subject: formValues.subject,\r\n      text: formValues.content\r\n    };\r\n    this.props.sendMail(mail);\r\n    //this.props.onSubmit(formValues);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 style={{ textAlign: \"center\" }}>Send Mail</h2>\r\n        <div\r\n          className=\" ui two column centered grid\"\r\n          style={{ padding: \"20px\" }}\r\n        >\r\n          <div className=\"column\">\r\n            <div className=\"segment\">\r\n              <p>asdadasdsa</p>\r\n            </div>\r\n            <form\r\n              className=\"ui form error\"\r\n              onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n            >\r\n              <Field\r\n                name=\"subject\"\r\n                component={this.renderInput}\r\n                label=\"Subject\"\r\n              />\r\n              <Field\r\n                name=\"content\"\r\n                component={this.renderInputArea}\r\n                label=\"Content\"\r\n              />\r\n              <button\r\n                className=\"ui button primary\"\r\n                style={{ marginTop: \"10px\" }}\r\n              >\r\n                Submit\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \" You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\nconst formWrapped = reduxForm({\r\n  form: \"mailForm\",\r\n  validate: validate\r\n})(TemplateMail);\r\n\r\nexport default connect(\r\n  null, // mapStateToProp\r\n  { sendMail } // action creater\r\n)(formWrapped);\r\n"]},"metadata":{},"sourceType":"module"}