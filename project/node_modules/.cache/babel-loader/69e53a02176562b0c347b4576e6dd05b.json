{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\necat\\\\WorkSpace\\\\project\\\\src\\\\components\\\\template\\\\TemplateForm.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\n\nclass TemplateForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.renderInputArea = ({\n      input,\n      label,\n      meta\n    }) => {\n      const classNameError = \"field \".concat(meta.error && meta.touched ? \"error\" : \"\"); // field ı kırmızıya boyamak\n\n      return React.createElement(\"div\", {\n        className: classNameError,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        className: \"ui label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, label), React.createElement(\"textarea\", Object.assign({}, input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })), this.renderError(meta)); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  //buraya meta yı gönderdik\n  renderError({\n    error,\n    touched\n  }) {\n    //check error\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, error));\n    }\n  } //formPorps.input\n\n\n  render() {\n    //console.log(this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"ui form error\",\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"recipients\" // bu isim sayesinde validate objesindeki prop ile eslesebiliyor\n      ,\n      component: this.renderInput,\n      label: \"recipients\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"subject \" // bu isim sayesinde validate objesindeki prop ile eslesebiliyor\n      ,\n      component: this.renderInput,\n      label: \"Enter Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"body\",\n      component: this.renderInputArea,\n      label: \"enter post\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \" Submit\")));\n  }\n\n}\n\nconst validate = formValues => {\n  // forma göndermek icin validate fonksiyonu olusturduk fonksiyonun amacı error\n  // olmadıkca geriye bos obje göndericek bu sayede redux-form herhangi bir validate hatası olmadıgını anlayacak\n  // formun bu validate fonksiyonunu tanıması icin connect fonksiyonuna (bu örnekte reduxForm) validate value:pair olarak gönderiyoruz\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \" You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n/* refactor den öncesi\r\nexport default reduxForm({\r\n  form: \"streamCreate\",\r\n  validate: validate \r\n})(StreamCreate);\r\n*/\n\n\nexport default reduxForm({\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\n  form: \"streamForm\",\n  validate: validate //sadece validate de yazılabilir\n\n})(TemplateForm);","map":{"version":3,"sources":["C:\\Users\\necat\\WorkSpace\\project\\src\\components\\template\\TemplateForm.js"],"names":["React","Field","reduxForm","TemplateForm","Component","renderInput","input","label","meta","classNameError","error","touched","renderError","renderInputArea","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\"; // field is component , reduxForm is connnect function that we used in redux\r\n\r\nclass TemplateForm extends React.Component {\r\n  //buraya meta yı gönderdik\r\n\r\n  renderError({ error, touched }) {\r\n    //check error\r\n    if (touched && error) {\r\n      return (\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  //formPorps.input\r\n  renderInput = ({ input, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n        <input {...input} autoComplete=\"off\" />\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  renderInputArea = ({ input, label, meta }) => {\r\n    const classNameError = `field ${meta.error && meta.touched ? \"error\" : \"\"}`; // field ı kırmızıya boyamak\r\n    return (\r\n      <div className={classNameError}>\r\n        <label className=\"ui label\">{label}</label>\r\n\r\n        <textarea {...input}></textarea>\r\n        {this.renderError(meta)}\r\n      </div>\r\n    ); // input objesinin tamamını compenenetin icine esliyoruz example: onChange = fromPorps.input.onChange gibi\r\n  };\r\n\r\n  onSubmit = (formValues) => {\r\n    this.props.onSubmit(formValues);\r\n  };\r\n\r\n  render() {\r\n    //console.log(this.props);\r\n    return (\r\n      <div>\r\n        <form\r\n          className=\"ui form error\"\r\n          onSubmit={this.props.handleSubmit(this.onSubmit)}\r\n        >\r\n          <Field\r\n            name=\"recipients\" // bu isim sayesinde validate objesindeki prop ile eslesebiliyor\r\n            component={this.renderInput}\r\n            label=\"recipients\"\r\n          />\r\n          <Field\r\n            name=\"subject \" // bu isim sayesinde validate objesindeki prop ile eslesebiliyor\r\n            component={this.renderInput}\r\n            label=\"Enter Title\"\r\n          />\r\n          <Field\r\n            name=\"body\"\r\n            component={this.renderInputArea}\r\n            label=\"enter post\"\r\n          />\r\n          <button className=\"ui button primary\"> Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  // forma göndermek icin validate fonksiyonu olusturduk fonksiyonun amacı error\r\n  // olmadıkca geriye bos obje göndericek bu sayede redux-form herhangi bir validate hatası olmadıgını anlayacak\r\n  // formun bu validate fonksiyonunu tanıması icin connect fonksiyonuna (bu örnekte reduxForm) validate value:pair olarak gönderiyoruz\r\n  const errors = {};\r\n  if (!formValues.title) {\r\n    errors.title = \" You must enter a title\";\r\n  }\r\n  if (!formValues.description) {\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n  return errors;\r\n};\r\n\r\n/* refactor den öncesi\r\nexport default reduxForm({\r\n  form: \"streamCreate\",\r\n  validate: validate \r\n})(StreamCreate);\r\n*/\r\n\r\nexport default reduxForm({\r\n  // burayı refactor'lüyoruz cünkü connect i kullanmamız lazım\r\n  // normal connect fonksiyonun aksine tek parametre alıyor ve bu obje bir configration objesi\r\n  form: \"streamForm\",\r\n  validate: validate //sadece validate de yazılabilir\r\n})(TemplateForm);\r\n"]},"metadata":{},"sourceType":"module"}